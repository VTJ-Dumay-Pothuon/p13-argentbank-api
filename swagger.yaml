swagger: '2.0'
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: '1.0.0'
  termsOfService: 'http://swagger.io/terms/'
host: localhost:3001
basePath: /api/v1
schemes:
  - http
paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: '#/definitions/Login'
      produces:
        - application/json
      responses:
        '200':
          description: Login Successfully
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: Signup Successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/profile:
    post:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          type: string
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: '#/definitions/UserProfile'
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error


  /account :
    post:
      security:
        - Bearer: []
      tags:
        - Account Module
      summary: User account
      description: API for displaying one account from one user, and access its transactions
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          type: string
        - in: body
          name: ID
          description: the transaction's ID
          required: true
          schema:
            $ref: '#/definitions/UserID'
      produces:
        - application/json
      responses:
        '200':
          description: Transaction retrieved successully
          schema:
            $ref: '#/definitions/Account'
        '403':
          description: You are not allowed to access this account
        '404':
          description: User with ID :id not found in database
        '500':
          description: Internal Server Error


  /transactions/all :
    get:
      security:
        - Bearer: []
      tags:
        - Transactions Module
      summary: All transactions
      description: API for getting all transactions for the user
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: User transactions retrieved successully
          schema:
            $ref: '#/definitions/TransactionsResponse'
        '401':
          description: Unauthorized (token issue)
        '500':
          description: Internal Server Error
  /transactions/get :
    post:
      security:
        - Bearer: []
      tags:
        - Transactions Module
      summary: One transaction from URL id
      description: API for displaying one transaction from its id
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          type: string
        - in: body
          name: ID
          description: the transaction's ID
          required: true
          schema:
            $ref: '#/definitions/TransactionID'
      produces:
        - application/json
      responses:
        '200':
          description: Transaction retrieved successully
          schema:
            $ref: '#/definitions/Transaction'
        '403':
          description: user id (from token) mismatch with transaction.ownerid 
        '404':
          description: Transaction with ID :id not found in database
        '500':
          description: Internal Server Error
  /transactions/create :
    post:
      security:
        - Bearer: []
      tags:
        - Transactions Module
      summary: One transaction from URL id
      description: API for creating a new transaction
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          type: string
        - in: body
          name: body
          description: Create a new transaction
          required: true
          schema:
            $ref: '#/definitions/SetTransaction'
      produces:
        - application/json
      responses:
        '200':
          description: Transaction created successully
          schema:
            $ref: '#/definitions/Transaction'
        '401':
          description: Unauthorized (token issue)
        '403':
          description: user id (from token) mismatch with transaction.ownerid 
        '500':
          description: Internal Server Error
  /transactions/edit :
    put:
      security:
        - Bearer: []
      tags:
        - Transactions Module
      summary: One transaction from URL id
      description: API for updating one transaction from its id
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          type: string
        - in: body
          name: body
          description: Create a new transaction
          required: true
          schema:
            $ref: '#/definitions/Transaction'
      produces:
        - application/json
      responses:
        '200':
          description: Transaction updated successully
          schema:
            $ref: '#/definitions/Transaction'
        '401':
          description: Unauthorized (token issue)
        '403':
          description: user id (from token) mismatch with transaction.ownerid 
        '404':
          description: Transaction with ID :id not found in database
        '500':
          description: Internal Server Error
  /transactions/delete :
    delete:
      security:
        - Bearer: []
      tags:
        - Transactions Module
      summary: One transaction from URL id
      description: API for deleting one transaction from its id
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          type: string
        - in: body
          name: ID
          description: the transaction's ID
          required: true
          schema:
            $ref: '#/definitions/TransactionID'
      produces:
        - application/json
      responses:
        '200':
          description: Transaction deleted successully
        '401':
          description: Unauthorized (token issue)
        '403':
          description: user id (from token) mismatch with transaction.ownerid 
        '404':
          description: Transaction with ID :id not found in database
        '500':
          description: Internal Server Error
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    properties:
      id:
        type: string
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
      firstName:
        type: string
        description: user first name
      lastName:
        type: string
        description: user last name
  Login:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
  ApiResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
  LoginResponse:
    type: object
    properties:
      token:
        type: string
  TransactionsResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          transactions:
            type: array
            items:
              $ref: '#/definitions/Transaction'
  UserProfile:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
  SetTransaction:
    type: object
    properties:
      date:
        type: object
        description: Date object
      description:
        type: string
      amount:
        type: number
  Transaction:
    type: object
    properties:
      id:
        type: string
      ownerid:
        $ref: '#/definitions/User/properties/id'
      date:
        type: object
        description: Date object
      description:
        type: string
      amount:
        type: number
  TransactionID:
    type: object
    description: ID of an existing transaction
    properties:
      id:
        $ref: '#/definitions/Transaction/properties/id'
  UserID:
    type: object
    description: ID of an existing user
    properties:
      id:
        $ref: '#/definitions/User/properties/id'
  Account:
    type: object
    properties:
      transactions:
        properties:
          id:
            type: string
          name:
            type: string
          transactions:
            type: array
            items:
              $ref: '#/definitions/Transaction'
          balance:
            type: number
  